import { PDFDocument } from 'pdf-lib';
import { PdfSigner } from './pdf-signer';
import { SignDigitalParameters, SignFieldParameters, AddFieldParameters, SignVisualParameters, SignerSettings } from 'src/models/index';

import PdfPrinter = require('pdfmake');
import streamBuffers = require('stream-buffers');

import { pdfSignerAssets13 } from '../test/_run-assets/pdf-signer/assets-pdf-signer-pdf-13';
import { pdfSignerAssets17 } from '../test/_run-assets/pdf-signer/assets-pdf-signer-pdf-17';
import { pdfSignerAssets17Streams } from '../test/_run-assets/pdf-signer/assets-pdf-signer-pdf-17-streams';
import { settingsAssets } from '../test/_run-assets/pdf-signer/assets-settings';
import { generateAsset } from '../test/_helpers/generate-asset';
import { bufferReplace } from '../test/_helpers/buffer-helpers';

import { use as chaiUse } from 'chai';
import { expect } from 'chai';

const chaiAsPromised = require('chai-as-promised');
chaiUse(chaiAsPromised);

async function generatePdfMakePdfAsync(): Promise<Buffer> {
    const fonts = {
        Helvetica: {
            normal: 'Helvetica',
            bold: 'Helvetica-Bold',
            italics: 'Helvetica-Oblique',
            bolditalics: 'Helvetica-BoldOblique'
          }
    };
    
    const printer = new PdfPrinter(fonts);
    
    const docDefinition = {
        info: {
            title: 'SignPdfLib Test Document',
            author: 'SignPdfLib',
            creator: 'SignPdfLib',
            producer: 'SignPdfLib',
            creationDate: new Date(2023, 1, 23, 9, 0, 0),
            modDate: new Date(2023, 1, 23, 9, 0, 0)
        },
        content: [
            'PDF signing test document generated by PdfMake.'
        ],
        defaultStyle: {
          font: 'Helvetica'
        }
    };
    
    const pdfDoc = printer.createPdfKitDocument(docDefinition);
    const streamBuffer = new streamBuffers.WritableStreamBuffer();
    pdfDoc.pipe(streamBuffer);
    pdfDoc.end();
    return new Promise((resolve) => {
        pdfDoc.on('end', () => {
            resolve(streamBuffer.getContents() as Buffer);
        });
    });
}

async function generatePdfLibPdfAsync(useObjectStreams: boolean = false): Promise<Buffer> {
    const pdfDoc = await PDFDocument.create();
    pdfDoc.setProducer('SignPdfLib');
    pdfDoc.setCreator('SignPdfLib');
    pdfDoc.setCreationDate(new Date(2023, 1, 23, 9, 0, 0));
    pdfDoc.setModificationDate(new Date(2023, 1, 23, 9, 0, 0));

    const page = pdfDoc.addPage();
    const fontSize = 10;
    page.drawText('PDF signing test document generated by PDFLib.', {
        x: 50,
        y: page.getSize().height - 4 * fontSize,
        size: fontSize
    });

    return Buffer.from(await pdfDoc.save({ useObjectStreams }));
}

describe('PdfSigner (pdf 1.3)', function () {

    let pdfSigner: PdfSigner;
    let info: SignDigitalParameters;
    let fieldInfo: SignFieldParameters;
    let addFieldInfo: AddFieldParameters;
    let visualInfo: SignVisualParameters;
    let settings: SignerSettings;

    beforeEach(function () {
        info = {
            pageNumber: 1,

            name: 'Test Signer',
            location: 'Timisoara',
            reason: 'Signing',
            date: new Date(2023, 1, 20, 18, 47, 35), 
            contactInfo: 'signer@semnezonline.ro'
        };

        fieldInfo = {
            fieldName: 'Signature1',

            name: 'Test Signer',
            location: 'Timisoara',
            reason: 'Signing',
            date: new Date(2023, 1, 20, 18, 47, 35), 
            contactInfo: 'signer@semnezonline.ro',

            background: pdfSignerAssets13.signatureJpgImage,
            texts: [
                {
                    lines: [ 
                        'JOHN', 
                        'DOE'
                    ]
                }, {
                    lines: [ 
                        'Digitally signed by', 
                        'JOHN DOE', 
                        'Date: 2023.11.03', 
                        '20:28:46 +02\'00\''
                    ]
                }
            ]
        };

        addFieldInfo = {
            pageNumber: 1,
            boundingBox: { left: 50.0, top: 100, right: 50.0 + 214.0, bottom: 100 + 70 }
        }

        visualInfo = {
            pageNumber: 1,

            background: pdfSignerAssets13.signaturePngImage,
            boundingBox: { left: 50.0, top: 100, right: 50.0 + 214.0, bottom: 100 + 70 }
        };

        settings = {
            signatureLength: 4000 - 6,
            rangePlaceHolder: 9999999,
            
            p12Certificate: settingsAssets.p12Certificate,
            pemCertificate: settingsAssets.pemCertificate,
            pemKey: settingsAssets.pemKey,
            certificatePassword: 'password'
        }
        pdfSigner = new PdfSigner(settings);
    });

    it('_generate', async function () {
        const pdf = await generatePdfMakePdfAsync();
        await generateAsset.generateBinaryAsync(pdfSignerAssets13.paths.pdf, pdf);
        
        info.contactInfo = 'signer@semnezonline.ro';
        const signedPdf = await pdfSigner.signAsync(pdf, info);
        const tamperedSignedPdf = bufferReplace(signedPdf, 'signer@semnezonline.ro', 'xxxxxx@xxxxxxxxxxxx.xx');
        await generateAsset.generateBinaryAsync(pdfSignerAssets13.paths.tamperedSignedPdf, tamperedSignedPdf);

        info.contactInfo = 'signer2@semnezonline.ro';
        const tamperedOnlyFirstTwiceSignedPdf = await pdfSigner.signAsync(tamperedSignedPdf, info);
        await generateAsset.generateBinaryAsync(pdfSignerAssets13.paths.tamperedOnlyFirstTwiceSignedPdf, tamperedOnlyFirstTwiceSignedPdf);

        const tamperedAppendedSignedPdf = Buffer.concat([ signedPdf, signedPdf.subarray(pdf.length) ]);
        await generateAsset.generateBinaryAsync(pdfSignerAssets13.paths.tamperedAppendedSignedPdf, tamperedAppendedSignedPdf);
    })

    describe('addPlaceholderAsync', function() {
        it('adds placeholder', async function() {
            const res = await pdfSigner.addPlaceholderAsync(pdfSignerAssets13.pdf, info);

            await generateAsset.generateBinaryAsync(pdfSignerAssets13.paths.placeholderPdf, res);
            expect(res).to.be.deep.equal(pdfSignerAssets13.placeholderPdf);
        })

        it('adds placeholder for different settings', async function() {
            const pdfSigner = new PdfSigner({ ...settings, signatureLength: 5000, rangePlaceHolder: 9999 });
            const res = await pdfSigner.addPlaceholderAsync(pdfSignerAssets13.pdf, info);

            await generateAsset.generateBinaryAsync(pdfSignerAssets13.paths.differentPlaceholderPdf, res);
            expect(res).to.be.deep.equal(pdfSignerAssets13.differentPlaceholderPdf);
        })

        it('adds placeholder for empty info', async function() {
            const info: SignDigitalParameters = {
                pageNumber: 1
            }
            
            const res = await pdfSigner.addPlaceholderAsync(pdfSignerAssets13.pdf, info);

            await generateAsset.generateBinaryAsync(pdfSignerAssets13.paths.noInfoPlaceholderPdf, res);
            expect(res).to.be.deep.equal(pdfSignerAssets13.noInfoPlaceholderPdf);
        })

        it('throws when not enough space for range', async function() {
            const pdfSigner = new PdfSigner({ ...settings, rangePlaceHolder: 9 });
            
            await expect(pdfSigner.addPlaceholderAsync(pdfSignerAssets13.pdf, info)).to.be.rejected;
        })

        it('adds placeholder for positive coordinates', async function() {
            info.visual = {
                background: pdfSignerAssets13.signaturePngImage,
                boundingBox: { left: 50.0, top: 100, right: 50.0 + 214.0, bottom: 100 + 70 }
            };
            const res = await pdfSigner.addPlaceholderAsync(pdfSignerAssets13.pdf, info);
            
            await generateAsset.generateBinaryAsync(pdfSignerAssets13.paths.positiveCoordinatesPlaceholderPdf, res);
            expect(res).to.be.deep.equal(pdfSignerAssets13.positiveCoordinatesPlaceholderPdf);
        })

        it('adds placeholder for negative coordinates', async function() {
            info.visual = {
                background: pdfSignerAssets13.signaturePngImage,
                boundingBox: { left: -50.0 - 214.0, top: -100 - 70, right: -50.0, bottom: -100 }
            };
            const res = await pdfSigner.addPlaceholderAsync(pdfSignerAssets13.pdf, info);
            
            await generateAsset.generateBinaryAsync(pdfSignerAssets13.paths.negativeCoordinatesPlaceholderPdf, res);
            expect(res).to.be.deep.equal(pdfSignerAssets13.negativeCoordinatesPlaceholderPdf);
        })

        it('adds placeholder with jpg image', async function() {
            info.visual = {
                background: pdfSignerAssets13.signatureJpgImage,
                boundingBox: { left: 50.0, top: 100, right: 50.0 + 214.0, bottom: 100 + 70 }
            };
            const res = await pdfSigner.addPlaceholderAsync(pdfSignerAssets13.pdf, info);

            await generateAsset.generateBinaryAsync(pdfSignerAssets13.paths.jpgImagePlaceholderPdf, res);
            expect(res).to.be.deep.equal(pdfSignerAssets13.jpgImagePlaceholderPdf);
        })

        it('adds placeholder with png image', async function() {
            info.visual = {
                background: pdfSignerAssets13.signaturePngImage,
                boundingBox: { left: 50.0, top: 100, right: 50.0 + 214.0, bottom: 100 + 70 }
            };
            const res = await pdfSigner.addPlaceholderAsync(pdfSignerAssets13.pdf, info);

            await generateAsset.generateBinaryAsync(pdfSignerAssets13.paths.pngImagePlaceholderPdf, res);
            expect(res).to.be.deep.equal(pdfSignerAssets13.pngImagePlaceholderPdf);
        })
    })

    describe('addFieldAsync', function() {
        it('adds field', async function() {
            const res = await pdfSigner.addFieldAsync(pdfSignerAssets13.pdf, addFieldInfo);

            await generateAsset.generateBinaryAsync(pdfSignerAssets13.paths.fieldPdf, res);
            expect(res).to.be.deep.equal(pdfSignerAssets13.fieldPdf);
        })

        it('adds field for different settings', async function() {
            const pdfSigner = new PdfSigner({ ...settings, signatureLength: 5000, rangePlaceHolder: 9999 });
            const res = await pdfSigner.addFieldAsync(pdfSignerAssets13.pdf, addFieldInfo);

            await generateAsset.generateBinaryAsync(pdfSignerAssets13.paths.differentFieldPdf, res);
            expect(res).to.be.deep.equal(pdfSignerAssets13.differentFieldPdf);
        })

        it('adds field for positive coordinates', async function() {
            addFieldInfo.boundingBox = { left: 50.0, top: 100, right: 50.0 + 214.0, bottom: 100 + 70 };
            
            const res = await pdfSigner.addFieldAsync(pdfSignerAssets13.pdf, addFieldInfo);
            
            await generateAsset.generateBinaryAsync(pdfSignerAssets13.paths.positiveCoordinatesFieldPdf, res);
            expect(res).to.be.deep.equal(pdfSignerAssets13.positiveCoordinatesFieldPdf);
        })

        it('adds field for negative coordinates', async function() {
            addFieldInfo.boundingBox = { left: -50.0 - 214.0, top: -100 - 70, right: -50.0, bottom: -100 };

            const res = await pdfSigner.addFieldAsync(pdfSignerAssets13.pdf, addFieldInfo);
            
            await generateAsset.generateBinaryAsync(pdfSignerAssets13.paths.negativeCoordinatesFieldPdf, res);
            expect(res).to.be.deep.equal(pdfSignerAssets13.negativeCoordinatesFieldPdf);
        })
    })
    
    describe('signAsync', function() {
        it('signs document', async function() {
            const res = await pdfSigner.signAsync(pdfSignerAssets13.pdf, info);
            
            await generateAsset.generateBinaryAsync(pdfSignerAssets13.paths.signedPdf, res);
            expect(res).to.be.deep.equal(pdfSignerAssets13.signedPdf);
        })

        it('signs already signed document', async function() {
            const res = await pdfSigner.signAsync(pdfSignerAssets13.signedPdf, info);

            await generateAsset.generateBinaryAsync(pdfSignerAssets13.paths.twiceSignedPdf, res);
            expect(res).to.be.deep.equal(pdfSignerAssets13.twiceSignedPdf);
        })

        it('throws when not enough space for signature', async function() {
            const pdfSigner = new PdfSigner({ ...settings, signatureLength: 200 });
            
            await expect(pdfSigner.signAsync(pdfSignerAssets13.pdf, info)).to.be.rejected;
        })

        it('signs for positive coordinates', async function() {
            info.visual = {
                background: pdfSignerAssets13.signaturePngImage,
                boundingBox: { left: 50.0, top: 100, right: 50.0 + 214.0, bottom: 100 + 70 }
            };
            const res = await pdfSigner.signAsync(pdfSignerAssets13.pdf, info);
            
            await generateAsset.generateBinaryAsync(pdfSignerAssets13.paths.positiveCoordinatesSignedPdf, res);
            expect(res).to.be.deep.equal(pdfSignerAssets13.positiveCoordinatesSignedPdf);
        })

        it('signs for negative coordinates', async function() {
            info.visual = {
                background: pdfSignerAssets13.signaturePngImage,
                boundingBox: { left: -50.0 - 214.0, top: -100 - 70, right: -50.0, bottom: -100 }
            };
            const res = await pdfSigner.signAsync(pdfSignerAssets13.pdf, info);
            
            await generateAsset.generateBinaryAsync(pdfSignerAssets13.paths.negativeCoordinatesSignedPdf, res);
            expect(res).to.be.deep.equal(pdfSignerAssets13.negativeCoordinatesSignedPdf);
        })

        it('signs with jpg image', async function() {
            info.visual = {
                background: pdfSignerAssets13.signatureJpgImage,
                boundingBox: { left: 50.0, top: 100, right: 50.0 + 214.0, bottom: 100 + 70 }
            };
            const signedPdf = await pdfSigner.signAsync(pdfSignerAssets13.pdf, info);
            info.visual.boundingBox.left += 250;
            info.visual.boundingBox.right += 250;
            const twiceSignedPdf = await pdfSigner.signAsync(signedPdf, info);

            await generateAsset.generateBinaryAsync(pdfSignerAssets13.paths.jpgImageTwiceSignedPdf, twiceSignedPdf);
            expect(twiceSignedPdf).to.be.deep.equal(pdfSignerAssets13.jpgImageTwiceSignedPdf);
        })

        it('signs with png image', async function() {
            info.visual = {
                background: pdfSignerAssets13.signaturePngImage,
                boundingBox: { left: 50.0, top: 100, right: 50.0 + 214.0, bottom: 100 + 70 }
            };
            const signedPdf = await pdfSigner.signAsync(pdfSignerAssets13.pdf, info);
            info.visual.boundingBox.left += 250;
            info.visual.boundingBox.right += 250;
            const twiceSignedPdf = await pdfSigner.signAsync(signedPdf, info);

            await generateAsset.generateBinaryAsync(pdfSignerAssets13.paths.pngImageTwiceSignedPdf, twiceSignedPdf);
            expect(twiceSignedPdf).to.be.deep.equal(pdfSignerAssets13.pngImageTwiceSignedPdf);
        })

        it('works for missing p12 certificate', async function() {
            const pdfSigner = new PdfSigner({ ...settings, p12Certificate: undefined });

            await expect(pdfSigner.signAsync(pdfSignerAssets13.pdf, info)).to.be.fulfilled;
        })

        it('works for missing pem certificate', async function() {
            const pdfSigner = new PdfSigner({ ...settings, pemCertificate: undefined });

            await expect(pdfSigner.signAsync(pdfSignerAssets13.pdf, info)).to.be.fulfilled;
        })

        it('works for missing pem key', async function() {
            const pdfSigner = new PdfSigner({ ...settings, pemKey: undefined });

            await expect(pdfSigner.signAsync(pdfSignerAssets13.pdf, info)).to.be.fulfilled;
        })

        it('throws for missing p12 certificate, pem certificate and pem key', async function() {
            const pdfSigner = new PdfSigner({ ...settings, p12Certificate: undefined, pemCertificate: undefined, pemKey: undefined });

            await expect(pdfSigner.signAsync(pdfSignerAssets13.pdf, info)).to.be.rejected;
        })
    })

    describe('signFieldAsync', function() {
        it('signs document', async function() {
            const res = await pdfSigner.signFieldAsync(pdfSignerAssets13.fieldPdf, fieldInfo);
            
            await generateAsset.generateBinaryAsync(pdfSignerAssets13.paths.fieldSignedPdf, res);
            expect(res).to.be.deep.equal(pdfSignerAssets13.fieldSignedPdf);
        })

        it('signs specified field', async function() {
            addFieldInfo.boundingBox.left += 250;
            addFieldInfo.boundingBox.right += 250;
            const twoFieldsPdf = await pdfSigner.addFieldAsync(pdfSignerAssets13.fieldPdf, addFieldInfo);

            fieldInfo.fieldName = 'Signature2';

            const res = await pdfSigner.signFieldAsync(twoFieldsPdf, fieldInfo);
            
            await generateAsset.generateBinaryAsync(pdfSignerAssets13.paths.specifiedFieldSignedPdf, res);
            expect(res).to.be.deep.equal(pdfSignerAssets13.specifiedFieldSignedPdf);
        })

        it('throws when field not found', async function() {
            fieldInfo.fieldName = 'Another name';

            await expect(pdfSigner.signFieldAsync(pdfSignerAssets13.fieldPdf, fieldInfo)).to.be.rejected;
        })

        it('throws for signature', async function() {
            await expect(pdfSigner.signFieldAsync(pdfSignerAssets13.signedPdf, fieldInfo)).to.be.rejected;
        })

        it('signs with jpg image', async function() {
            fieldInfo.background = pdfSignerAssets13.signatureJpgImage;

            const signedPdf = await pdfSigner.signFieldAsync(pdfSignerAssets13.fieldPdf, fieldInfo);

            await generateAsset.generateBinaryAsync(pdfSignerAssets13.paths.jpgImageFieldSignedPdf, signedPdf);
            expect(signedPdf).to.be.deep.equal(pdfSignerAssets13.jpgImageFieldSignedPdf);
        })

        it('signs with png image', async function() {
            fieldInfo.background = pdfSignerAssets13.signaturePngImage;

            const signedPdf = await pdfSigner.signFieldAsync(pdfSignerAssets13.fieldPdf, fieldInfo);

            await generateAsset.generateBinaryAsync(pdfSignerAssets13.paths.pngImageFieldSignedPdf, signedPdf);
            expect(signedPdf).to.be.deep.equal(pdfSignerAssets13.pngImageFieldSignedPdf);
        })

        it('works for missing p12 certificate', async function() {
            const pdfSigner = new PdfSigner({ ...settings, p12Certificate: undefined });

            await expect(pdfSigner.signFieldAsync(pdfSignerAssets13.fieldPdf, fieldInfo)).to.be.fulfilled;
        })

        it('works for missing pem certificate', async function() {
            const pdfSigner = new PdfSigner({ ...settings, pemCertificate: undefined });

            await expect(pdfSigner.signFieldAsync(pdfSignerAssets13.fieldPdf, fieldInfo)).to.be.fulfilled;
        })

        it('works for missing pem key', async function() {
            const pdfSigner = new PdfSigner({ ...settings, pemKey: undefined });

            await expect(pdfSigner.signFieldAsync(pdfSignerAssets13.fieldPdf, fieldInfo)).to.be.fulfilled;
        })

        it('throws for missing p12 certificate, pem certificate and pem key', async function() {
            const pdfSigner = new PdfSigner({ ...settings, p12Certificate: undefined, pemCertificate: undefined, pemKey: undefined });

            await expect(pdfSigner.signFieldAsync(pdfSignerAssets13.fieldPdf, fieldInfo)).to.be.rejected;
        })
    })
    
    describe('signVisualAsync', function() {
        it('signs document', async function() {
            const res = await pdfSigner.signVisualAsync(pdfSignerAssets13.pdf, visualInfo);
            
            await generateAsset.generateBinaryAsync(pdfSignerAssets13.paths.signedVisualPdf, res);
            expect(res).to.be.deep.equal(pdfSignerAssets13.signedVisualPdf);
        })

        it('throws for digitally signed document', async function() {
            await expect(pdfSigner.signVisualAsync(pdfSignerAssets13.signedPdf, visualInfo)).to.be.rejected;
        })

        it('signs for positive coordinates', async function() {
            visualInfo.boundingBox = { left: 50.0, top: 100, right: 50.0 + 214.0, bottom: 100 + 70 };

            const res = await pdfSigner.signVisualAsync(pdfSignerAssets13.pdf, visualInfo);
            
            await generateAsset.generateBinaryAsync(pdfSignerAssets13.paths.positiveCoordinatesSignedVisualPdf, res);
            expect(res).to.be.deep.equal(pdfSignerAssets13.positiveCoordinatesSignedVisualPdf);
        })

        it('signs for negative coordinates', async function() {
            visualInfo.boundingBox = { left: -50.0 - 214.0, top: -100 - 70, right: -50.0, bottom: -100 };

            const res = await pdfSigner.signVisualAsync(pdfSignerAssets13.pdf, visualInfo);
            
            await generateAsset.generateBinaryAsync(pdfSignerAssets13.paths.negativeCoordinatesSignedVisualPdf, res);
            expect(res).to.be.deep.equal(pdfSignerAssets13.negativeCoordinatesSignedVisualPdf);
        })

        it('signs with jpg image', async function() {
            visualInfo.background = pdfSignerAssets13.signatureJpgImage;

            const signedPdf = await pdfSigner.signVisualAsync(pdfSignerAssets13.pdf, visualInfo);
            visualInfo.boundingBox.left += 250;
            visualInfo.boundingBox.right += 250;
            const twiceSignedPdf = await pdfSigner.signVisualAsync(signedPdf, visualInfo);

            await generateAsset.generateBinaryAsync(pdfSignerAssets13.paths.jpgImageTwiceSignedVisualPdf, twiceSignedPdf);
            expect(twiceSignedPdf).to.be.deep.equal(pdfSignerAssets13.jpgImageTwiceSignedVisualPdf);
        })

        it('signs with png image', async function() {
            visualInfo.background = pdfSignerAssets13.signaturePngImage;

            const signedPdf = await pdfSigner.signVisualAsync(pdfSignerAssets13.pdf, visualInfo);
            visualInfo.boundingBox.left += 250;
            visualInfo.boundingBox.right += 250;
            const twiceSignedPdf = await pdfSigner.signVisualAsync(signedPdf, visualInfo);

            await generateAsset.generateBinaryAsync(pdfSignerAssets13.paths.pngImageTwiceSignedVisualPdf, twiceSignedPdf);
            expect(twiceSignedPdf).to.be.deep.equal(pdfSignerAssets13.pngImageTwiceSignedVisualPdf);
        })
    })
    
    describe('verifySignaturesAsync', function() {
        it('returns undefined for no signatures', async function() {
            const res = await pdfSigner.verifySignaturesAsync(pdfSignerAssets13.pdf);
            expect(res).to.be.undefined;
        })

        it('returns undefined for signature field', async function() {
            const res = await pdfSigner.verifySignaturesAsync(pdfSignerAssets13.fieldPdf);
            expect(res).to.be.undefined;
        })

        it('validates one signature', async function() {
            const res = await pdfSigner.verifySignaturesAsync(pdfSignerAssets13.signedPdf);

            await generateAsset.generateJsonAsync(pdfSignerAssets13.paths.checkSignedPdf, res);
            expect(res).to.be.deep.equal(pdfSignerAssets13.checkSignedPdf);
        })

        it('validates two signatures', async function() {
            const res = await pdfSigner.verifySignaturesAsync(pdfSignerAssets13.twiceSignedPdf);

            await generateAsset.generateJsonAsync(pdfSignerAssets13.paths.checkTwiceSignedPdf, res);
            expect(res).to.be.deep.equal(pdfSignerAssets13.checkTwiceSignedPdf);
        })

        it('detects tampered signature', async function() {
            const res = await pdfSigner.verifySignaturesAsync(pdfSignerAssets13.tamperedSignedPdf);

            await generateAsset.generateJsonAsync(pdfSignerAssets13.paths.checkTamperedSignedPdf, res);
            expect(res).to.be.deep.equal(pdfSignerAssets13.checkTamperedSignedPdf);
        })

        it('detects only first tampered signature', async function() {
            const res = await pdfSigner.verifySignaturesAsync(pdfSignerAssets13.tamperedOnlyFirstTwiceSignedPdf);

            await generateAsset.generateJsonAsync(pdfSignerAssets13.paths.checkTamperedOnlyFirstTwiceSignedPdf, res);
            expect(res).to.be.deep.equal(pdfSignerAssets13.checkTamperedOnlyFirstTwiceSignedPdf);
        })

        it('detects tampered appended pdf', async function() {
            const res = await pdfSigner.verifySignaturesAsync(pdfSignerAssets13.tamperedAppendedSignedPdf);

            await generateAsset.generateJsonAsync(pdfSignerAssets13.paths.checkTamperedAppendedSignedPdf, res);
            expect(res).to.be.deep.equal(pdfSignerAssets13.checkTamperedAppendedSignedPdf);
        })
    })

    describe('getFieldsAsync', function() {
        it('returns no fields', async function() {
            const res = await pdfSigner.getFieldsAsync(pdfSignerAssets13.pdf);
            expect(res).to.be.deep.equal([]);
        })

        it('returns one field', async function() {
            const res = await pdfSigner.getFieldsAsync(pdfSignerAssets13.fieldPdf);
            expect(res).to.be.deep.equal([ 'Signature1' ]);
        })

        it('returns two fields', async function() {
            const twoFieldsPdf = await pdfSigner.addFieldAsync(pdfSignerAssets13.fieldPdf, addFieldInfo);
            const res = await pdfSigner.getFieldsAsync(twoFieldsPdf);
            expect(res).to.be.deep.equal([ 'Signature1', 'Signature2' ]);
        })

        it('returns no fields for signed pdf', async function() {
            const res = await pdfSigner.getFieldsAsync(pdfSignerAssets13.signedPdf);
            expect(res).to.be.deep.equal([]);
        })
    })
})

describe('PdfSigner (pdf 1.7)', function () {

    let pdfSigner: PdfSigner;
    let info: SignDigitalParameters;
    let fieldInfo: SignFieldParameters;
    let addFieldInfo: AddFieldParameters;
    let visualInfo: SignVisualParameters;
    let settings: SignerSettings;

    beforeEach(function () {
        info = {
            pageNumber: 1,

            name: 'Test Signer',
            location: 'Timisoara',
            reason: 'Signing',
            date: new Date(2023, 1, 20, 18, 47, 35), 
            contactInfo: 'signer@semnezonline.ro'
        };

        fieldInfo = {
            fieldName: 'Signature1',

            name: 'Test Signer',
            location: 'Timisoara',
            reason: 'Signing',
            date: new Date(2023, 1, 20, 18, 47, 35), 
            contactInfo: 'signer@semnezonline.ro',

            background: pdfSignerAssets13.signatureJpgImage,
            texts: [
                {
                    lines: [ 
                        'JOHN', 
                        'DOE'
                    ]
                }, {
                    lines: [ 
                        'Digitally signed by', 
                        'JOHN DOE', 
                        'Date: 2023.11.03', 
                        '20:28:46 +02\'00\''
                    ]
                }
            ]
         };

        addFieldInfo = {
            pageNumber: 1,
            boundingBox: { left: 50.0, top: 100, right: 50.0 + 214.0, bottom: 100 + 70 }
        }

        visualInfo = {
            pageNumber: 1,

            background: pdfSignerAssets17.signaturePngImage,
            boundingBox: { left: 50.0, top: 100, right: 50.0 + 214.0, bottom: 100 + 70 }
        };

        settings = {
            signatureLength: 4000 - 6,
            rangePlaceHolder: 9999999,
            
            p12Certificate: settingsAssets.p12Certificate,
            pemCertificate: settingsAssets.pemCertificate,
            pemKey: settingsAssets.pemKey,
            certificatePassword: 'password'
        }
        pdfSigner = new PdfSigner(settings);
    });

    it('_generate', async function () {
        const pdf = await generatePdfLibPdfAsync();
        await generateAsset.generateBinaryAsync(pdfSignerAssets17.paths.pdf, pdf);
        
        info.contactInfo = 'signer@semnezonline.ro';
        const signedPdf = await pdfSigner.signAsync(pdf, info);
        const tamperedSignedPdf = bufferReplace(signedPdf, 'signer@semnezonline.ro', 'xxxxxx@xxxxxxxxxxxx.xx');
        await generateAsset.generateBinaryAsync(pdfSignerAssets17.paths.tamperedSignedPdf, tamperedSignedPdf);

        info.contactInfo = 'signer2@semnezonline.ro';
        const tamperedOnlyFirstTwiceSignedPdf = await pdfSigner.signAsync(tamperedSignedPdf, info);
        await generateAsset.generateBinaryAsync(pdfSignerAssets17.paths.tamperedOnlyFirstTwiceSignedPdf, tamperedOnlyFirstTwiceSignedPdf);

        const tamperedAppendedSignedPdf = Buffer.concat([ signedPdf, signedPdf.subarray(pdf.length) ]);
        await generateAsset.generateBinaryAsync(pdfSignerAssets17.paths.tamperedAppendedSignedPdf, tamperedAppendedSignedPdf);
    })

    describe('addPlaceholderAsync', function() {
        it('adds placeholder', async function() {
            const res = await pdfSigner.addPlaceholderAsync(pdfSignerAssets17.pdf, info);

            await generateAsset.generateBinaryAsync(pdfSignerAssets17.paths.placeholderPdf, res);
            expect(res).to.be.deep.equal(pdfSignerAssets17.placeholderPdf);
        })

        it('adds placeholder for different settings', async function() {
            const pdfSigner = new PdfSigner({ ...settings, signatureLength: 5000, rangePlaceHolder: 9999 });
            const res = await pdfSigner.addPlaceholderAsync(pdfSignerAssets17.pdf, info);

            await generateAsset.generateBinaryAsync(pdfSignerAssets17.paths.differentPlaceholderPdf, res);
            expect(res).to.be.deep.equal(pdfSignerAssets17.differentPlaceholderPdf);
        })

        it('adds placeholder for empty info', async function() {
            const info: SignDigitalParameters = {
                pageNumber: 1
            }
           
            const res = await pdfSigner.addPlaceholderAsync(pdfSignerAssets17.pdf, info);

            await generateAsset.generateBinaryAsync(pdfSignerAssets17.paths.noInfoPlaceholderPdf, res);
            expect(res).to.be.deep.equal(pdfSignerAssets17.noInfoPlaceholderPdf);
        })
        

        it('throws when not enough space for range', async function() {
            const pdfSigner = new PdfSigner({ ...settings, rangePlaceHolder: 9 });
            
            await expect(pdfSigner.addPlaceholderAsync(pdfSignerAssets17.pdf, info)).to.be.rejected;
        })

        it('adds placeholder for positive coordinates', async function() {
            info.visual = {
                background: pdfSignerAssets17.signaturePngImage,
                boundingBox: { left: 50.0, top: 100, right: 50.0 + 214.0, bottom: 100 + 70 }
            };
            const res = await pdfSigner.addPlaceholderAsync(pdfSignerAssets17.pdf, info);
            
            await generateAsset.generateBinaryAsync(pdfSignerAssets17.paths.positiveCoordinatesPlaceholderPdf, res);
            expect(res).to.be.deep.equal(pdfSignerAssets17.positiveCoordinatesPlaceholderPdf);
        })

        it('adds placeholder for negative coordinates', async function() {
            info.visual = {
                background: pdfSignerAssets17.signaturePngImage,
                boundingBox: { left: -50.0 - 214.0, top: -100 - 70, right: -50.0, bottom: -100 }
            };
            const res = await pdfSigner.addPlaceholderAsync(pdfSignerAssets17.pdf, info);
            
            await generateAsset.generateBinaryAsync(pdfSignerAssets17.paths.negativeCoordinatesPlaceholderPdf, res);
            expect(res).to.be.deep.equal(pdfSignerAssets17.negativeCoordinatesPlaceholderPdf);
        })

        it('adds placeholder with jpg image', async function() {
            info.visual = {
                background: pdfSignerAssets17.signatureJpgImage,
                boundingBox: { left: 50.0, top: 100, right: 50.0 + 214.0, bottom: 100 + 70 }
            };
            const res = await pdfSigner.addPlaceholderAsync(pdfSignerAssets17.pdf, info);

            await generateAsset.generateBinaryAsync(pdfSignerAssets17.paths.jpgImagePlaceholderPdf, res);
            expect(res).to.be.deep.equal(pdfSignerAssets17.jpgImagePlaceholderPdf);
        })

        it('adds placeholder with png image', async function() {
            info.visual = {
                background: pdfSignerAssets17.signaturePngImage,
                boundingBox: { left: 50.0, top: 100, right: 50.0 + 214.0, bottom: 100 + 70 }
            };
            const res = await pdfSigner.addPlaceholderAsync(pdfSignerAssets17.pdf, info);

            await generateAsset.generateBinaryAsync(pdfSignerAssets17.paths.pngImagePlaceholderPdf, res);
            expect(res).to.be.deep.equal(pdfSignerAssets17.pngImagePlaceholderPdf);
        })
    })

    describe('addFieldAsync', function() {
        it('adds field', async function() {
            const res = await pdfSigner.addFieldAsync(pdfSignerAssets17.pdf, addFieldInfo);

            await generateAsset.generateBinaryAsync(pdfSignerAssets17.paths.fieldPdf, res);
            expect(res).to.be.deep.equal(pdfSignerAssets17.fieldPdf);
        })

        it('adds field for different settings', async function() {
            const pdfSigner = new PdfSigner({ ...settings, signatureLength: 5000, rangePlaceHolder: 9999 });
            const res = await pdfSigner.addFieldAsync(pdfSignerAssets17.pdf, addFieldInfo);

            await generateAsset.generateBinaryAsync(pdfSignerAssets17.paths.differentFieldPdf, res);
            expect(res).to.be.deep.equal(pdfSignerAssets17.differentFieldPdf);
        })

        it('adds field for positive coordinates', async function() {
            addFieldInfo.boundingBox = { left: 50.0, top: 100, right: 50.0 + 214.0, bottom: 100 + 70 };
            
            const res = await pdfSigner.addFieldAsync(pdfSignerAssets17.pdf, addFieldInfo);
            
            await generateAsset.generateBinaryAsync(pdfSignerAssets17.paths.positiveCoordinatesFieldPdf, res);
            expect(res).to.be.deep.equal(pdfSignerAssets17.positiveCoordinatesFieldPdf);
        })

        it('adds field for negative coordinates', async function() {
            addFieldInfo.boundingBox = { left: -50.0 - 214.0, top: -100 - 70, right: -50.0, bottom: -100 };

            const res = await pdfSigner.addFieldAsync(pdfSignerAssets17.pdf, addFieldInfo);
            
            await generateAsset.generateBinaryAsync(pdfSignerAssets17.paths.negativeCoordinatesFieldPdf, res);
            expect(res).to.be.deep.equal(pdfSignerAssets17.negativeCoordinatesFieldPdf);
        })
    })
    
    
    describe('signAsync', function() {
        it('signs document', async function() {
            const res = await pdfSigner.signAsync(pdfSignerAssets17.pdf, info);
            
            await generateAsset.generateBinaryAsync(pdfSignerAssets17.paths.signedPdf, res);
            expect(res).to.be.deep.equal(pdfSignerAssets17.signedPdf);
        })

        it('signs already signed document', async function() {
            const res = await pdfSigner.signAsync(pdfSignerAssets17.signedPdf, info);

            await generateAsset.generateBinaryAsync(pdfSignerAssets17.paths.twiceSignedPdf, res);
            expect(res).to.be.deep.equal(pdfSignerAssets17.twiceSignedPdf);
        })

        it('throws when not enough space for signature', async function() {
            const pdfSigner = new PdfSigner({ ...settings, signatureLength: 200 });
            
            await expect(pdfSigner.signAsync(pdfSignerAssets17.pdf, info)).to.be.rejected;
        })

        it('signs for positive coordinates', async function() {
            info.visual = {
                background: pdfSignerAssets17.signaturePngImage,
                boundingBox: { left: 50.0, top: 100, right: 50.0 + 214.0, bottom: 100 + 70 }
            };
            const res = await pdfSigner.signAsync(pdfSignerAssets17.pdf, info);
            
            await generateAsset.generateBinaryAsync(pdfSignerAssets17.paths.positiveCoordinatesSignedPdf, res);
            expect(res).to.be.deep.equal(pdfSignerAssets17.positiveCoordinatesSignedPdf);
        })

        it('signs for negative coordinates', async function() {
            info.visual = {
                background: pdfSignerAssets17.signaturePngImage,
                boundingBox: { left: -50.0 - 214.0, top: -100 - 70, right: -50.0, bottom: -100 }
            };
            const res = await pdfSigner.signAsync(pdfSignerAssets17.pdf, info);
            
            await generateAsset.generateBinaryAsync(pdfSignerAssets17.paths.negativeCoordinatesSignedPdf, res);
            expect(res).to.be.deep.equal(pdfSignerAssets17.negativeCoordinatesSignedPdf);
        })

        it('signs with jpg image', async function() {
            info.visual = {
                background: pdfSignerAssets17.signatureJpgImage,
                boundingBox: { left: 50.0, top: 100, right: 50.0 + 214.0, bottom: 100 + 70 }
            };
            const signedPdf = await pdfSigner.signAsync(pdfSignerAssets17.pdf, info);
            info.visual.boundingBox.left += 250;
            info.visual.boundingBox.right += 250;
            const twiceSignedPdf = await pdfSigner.signAsync(signedPdf, info);

            await generateAsset.generateBinaryAsync(pdfSignerAssets17.paths.jpgImageTwiceSignedPdf, twiceSignedPdf);
            expect(twiceSignedPdf).to.be.deep.equal(pdfSignerAssets17.jpgImageTwiceSignedPdf);
        })

        it('signs with png image', async function() {
            info.visual = {
                background: pdfSignerAssets17.signaturePngImage,
                boundingBox: { left: 50.0, top: 100, right: 50.0 + 214.0, bottom: 100 + 70 }
            };
            const signedPdf = await pdfSigner.signAsync(pdfSignerAssets17.pdf, info);
            info.visual.boundingBox.left += 250;
            info.visual.boundingBox.right += 250;
            const twiceSignedPdf = await pdfSigner.signAsync(signedPdf, info);

            await generateAsset.generateBinaryAsync(pdfSignerAssets17.paths.pngImageTwiceSignedPdf, twiceSignedPdf);
            expect(twiceSignedPdf).to.be.deep.equal(pdfSignerAssets17.pngImageTwiceSignedPdf);
        })

        it('works for missing p12 certificate', async function() {
            const pdfSigner = new PdfSigner({ ...settings, p12Certificate: undefined });

            await expect(pdfSigner.signAsync(pdfSignerAssets17.pdf, info)).to.be.fulfilled;
        })

        it('works for missing pem certificate', async function() {
            const pdfSigner = new PdfSigner({ ...settings, pemCertificate: undefined });

            await expect(pdfSigner.signAsync(pdfSignerAssets17.pdf, info)).to.be.fulfilled;
        })

        it('works for missing pem key', async function() {
            const pdfSigner = new PdfSigner({ ...settings, pemKey: undefined });

            await expect(pdfSigner.signAsync(pdfSignerAssets17.pdf, info)).to.be.fulfilled;
        })

        it('throws for missing p12 certificate, pem certificate and pem key', async function() {
            const pdfSigner = new PdfSigner({ ...settings, p12Certificate: undefined, pemCertificate: undefined, pemKey: undefined });

            await expect(pdfSigner.signAsync(pdfSignerAssets17.pdf, info)).to.be.rejected;
        })
    })

    describe('signFieldAsync', function() {
        it('signs document', async function() {
            const res = await pdfSigner.signFieldAsync(pdfSignerAssets17.fieldPdf, fieldInfo);
            
            await generateAsset.generateBinaryAsync(pdfSignerAssets17.paths.fieldSignedPdf, res);
            expect(res).to.be.deep.equal(pdfSignerAssets17.fieldSignedPdf);
        })

        it('signs specified field', async function() {
            addFieldInfo.boundingBox.left += 250;
            addFieldInfo.boundingBox.right += 250;
            const twoFieldsPdf = await pdfSigner.addFieldAsync(pdfSignerAssets17.fieldPdf, addFieldInfo);

            fieldInfo.fieldName = 'Signature2';

            const res = await pdfSigner.signFieldAsync(twoFieldsPdf, fieldInfo);
            
            await generateAsset.generateBinaryAsync(pdfSignerAssets17.paths.specifiedFieldSignedPdf, res);
            expect(res).to.be.deep.equal(pdfSignerAssets17.specifiedFieldSignedPdf);
        })

        it('throws when field not found', async function() {
            fieldInfo.fieldName = 'Another name';

            await expect(pdfSigner.signFieldAsync(pdfSignerAssets17.fieldPdf, fieldInfo)).to.be.rejected;
        })

        it('throws for signature', async function() {
            await expect(pdfSigner.signFieldAsync(pdfSignerAssets17.signedPdf, fieldInfo)).to.be.rejected;
        })

        it('signs with jpg image', async function() {
            fieldInfo.background = pdfSignerAssets17.signatureJpgImage;

            const signedPdf = await pdfSigner.signFieldAsync(pdfSignerAssets17.fieldPdf, fieldInfo);

            await generateAsset.generateBinaryAsync(pdfSignerAssets17.paths.jpgImageFieldSignedPdf, signedPdf);
            expect(signedPdf).to.be.deep.equal(pdfSignerAssets17.jpgImageFieldSignedPdf);
        })

        it('signs with png image', async function() {
            fieldInfo.background = pdfSignerAssets17.signaturePngImage;

            const signedPdf = await pdfSigner.signFieldAsync(pdfSignerAssets17.fieldPdf, fieldInfo);

            await generateAsset.generateBinaryAsync(pdfSignerAssets17.paths.pngImageFieldSignedPdf, signedPdf);
            expect(signedPdf).to.be.deep.equal(pdfSignerAssets17.pngImageFieldSignedPdf);
        })

        it('works for missing p12 certificate', async function() {
            const pdfSigner = new PdfSigner({ ...settings, p12Certificate: undefined });

            await expect(pdfSigner.signFieldAsync(pdfSignerAssets17.fieldPdf, fieldInfo)).to.be.fulfilled;
        })

        it('works for missing pem certificate', async function() {
            const pdfSigner = new PdfSigner({ ...settings, pemCertificate: undefined });

            await expect(pdfSigner.signFieldAsync(pdfSignerAssets17.fieldPdf, fieldInfo)).to.be.fulfilled;
        })

        it('works for missing pem key', async function() {
            const pdfSigner = new PdfSigner({ ...settings, pemKey: undefined });

            await expect(pdfSigner.signFieldAsync(pdfSignerAssets17.fieldPdf, fieldInfo)).to.be.fulfilled;
        })

        it('throws for missing p12 certificate, pem certificate and pem key', async function() {
            const pdfSigner = new PdfSigner({ ...settings, p12Certificate: undefined, pemCertificate: undefined, pemKey: undefined });

            await expect(pdfSigner.signFieldAsync(pdfSignerAssets17.fieldPdf, fieldInfo)).to.be.rejected;
        })
    })
    
    describe('signVisualAsync', function() {
        it('signs document', async function() {
            const res = await pdfSigner.signVisualAsync(pdfSignerAssets17.pdf, visualInfo);
            
            await generateAsset.generateBinaryAsync(pdfSignerAssets17.paths.signedVisualPdf, res);
            expect(res).to.be.deep.equal(pdfSignerAssets17.signedVisualPdf);
        })

        it('throws for digitally signed document', async function() {
            await expect(pdfSigner.signVisualAsync(pdfSignerAssets17.signedPdf, visualInfo)).to.be.rejected;
        })

        it('signs for positive coordinates', async function() {
            visualInfo.boundingBox = { left: 50.0, top: 100, right: 50.0 + 214.0, bottom: 100 + 70 };

            const res = await pdfSigner.signVisualAsync(pdfSignerAssets17.pdf, visualInfo);
            
            await generateAsset.generateBinaryAsync(pdfSignerAssets17.paths.positiveCoordinatesSignedVisualPdf, res);
            expect(res).to.be.deep.equal(pdfSignerAssets17.positiveCoordinatesSignedVisualPdf);
        })

        it('signs for negative coordinates', async function() {
            visualInfo.boundingBox = { left: -50.0 - 214.0, top: -100 - 70, right: -50.0, bottom: -100 };

            const res = await pdfSigner.signVisualAsync(pdfSignerAssets17.pdf, visualInfo);
            
            await generateAsset.generateBinaryAsync(pdfSignerAssets17.paths.negativeCoordinatesSignedVisualPdf, res);
            expect(res).to.be.deep.equal(pdfSignerAssets17.negativeCoordinatesSignedVisualPdf);
        })

        it('signs with jpg image', async function() {
            visualInfo.background = pdfSignerAssets17.signatureJpgImage;

            const signedPdf = await pdfSigner.signVisualAsync(pdfSignerAssets17.pdf, visualInfo);
            visualInfo.boundingBox.left += 250;
            visualInfo.boundingBox.right += 250;
            const twiceSignedPdf = await pdfSigner.signVisualAsync(signedPdf, visualInfo);

            await generateAsset.generateBinaryAsync(pdfSignerAssets17.paths.jpgImageTwiceSignedVisualPdf, twiceSignedPdf);
            expect(twiceSignedPdf).to.be.deep.equal(pdfSignerAssets17.jpgImageTwiceSignedVisualPdf);
        })

        it('signs with png image', async function() {
            visualInfo.background = pdfSignerAssets17.signaturePngImage;

            const signedPdf = await pdfSigner.signVisualAsync(pdfSignerAssets17.pdf, visualInfo);
            visualInfo.boundingBox.left += 250;
            visualInfo.boundingBox.right += 250;
            const twiceSignedPdf = await pdfSigner.signVisualAsync(signedPdf, visualInfo);

            await generateAsset.generateBinaryAsync(pdfSignerAssets17.paths.pngImageTwiceSignedVisualPdf, twiceSignedPdf);
            expect(twiceSignedPdf).to.be.deep.equal(pdfSignerAssets17.pngImageTwiceSignedVisualPdf);
        })
    })
    
    describe('verifySignaturesAsync', function() {
        it('returns undefined for no signatures', async function() {
            const res = await pdfSigner.verifySignaturesAsync(pdfSignerAssets17.pdf);
            expect(res).to.be.undefined;
        })

        it('returns undefined for signature field', async function() {
            const res = await pdfSigner.verifySignaturesAsync(pdfSignerAssets17.fieldPdf);
            expect(res).to.be.undefined;
        })

        it('validates one signature', async function() {
            const res = await pdfSigner.verifySignaturesAsync(pdfSignerAssets17.signedPdf);

            await generateAsset.generateJsonAsync(pdfSignerAssets17.paths.checkSignedPdf, res);
            expect(res).to.be.deep.equal(pdfSignerAssets17.checkSignedPdf);
        })

        it('validates two signatures', async function() {
            const res = await pdfSigner.verifySignaturesAsync(pdfSignerAssets17.twiceSignedPdf);

            await generateAsset.generateJsonAsync(pdfSignerAssets17.paths.checkTwiceSignedPdf, res);
            expect(res).to.be.deep.equal(pdfSignerAssets17.checkTwiceSignedPdf);
        })

        it('detects tampered signature', async function() {
            const res = await pdfSigner.verifySignaturesAsync(pdfSignerAssets17.tamperedSignedPdf);

            await generateAsset.generateJsonAsync(pdfSignerAssets17.paths.checkTamperedSignedPdf, res);
            expect(res).to.be.deep.equal(pdfSignerAssets17.checkTamperedSignedPdf);
        })

        it('detects only first tampered signature', async function() {
            const res = await pdfSigner.verifySignaturesAsync(pdfSignerAssets17.tamperedOnlyFirstTwiceSignedPdf);

            await generateAsset.generateJsonAsync(pdfSignerAssets17.paths.checkTamperedOnlyFirstTwiceSignedPdf, res);
            expect(res).to.be.deep.equal(pdfSignerAssets17.checkTamperedOnlyFirstTwiceSignedPdf);
        })

        it('detects tampered appended pdf', async function() {
            const res = await pdfSigner.verifySignaturesAsync(pdfSignerAssets17.tamperedAppendedSignedPdf);

            await generateAsset.generateJsonAsync(pdfSignerAssets17.paths.checkTamperedAppendedSignedPdf, res);
            expect(res).to.be.deep.equal(pdfSignerAssets17.checkTamperedAppendedSignedPdf);
        })
    })

    describe('getFieldsAsync', function() {
        it('returns no fields', async function() {
            const res = await pdfSigner.getFieldsAsync(pdfSignerAssets17.pdf);
            expect(res).to.be.deep.equal([]);
        })

        it('returns one field', async function() {
            const res = await pdfSigner.getFieldsAsync(pdfSignerAssets17.fieldPdf);
            expect(res).to.be.deep.equal([ 'Signature1' ]);
        })

        it('returns two fields', async function() {
            const twoFieldsPdf = await pdfSigner.addFieldAsync(pdfSignerAssets17.fieldPdf, addFieldInfo);
            const res = await pdfSigner.getFieldsAsync(twoFieldsPdf);
            expect(res).to.be.deep.equal([ 'Signature1', 'Signature2' ]);
        })

        it('returns no fields for signed pdf', async function() {
            const res = await pdfSigner.getFieldsAsync(pdfSignerAssets17.signedPdf);
            expect(res).to.be.deep.equal([]);
        })
    })
})

describe('PdfSigner (pdf 1.7 streams)', function () {

    let pdfSigner: PdfSigner;
    let info: SignDigitalParameters;
    let fieldInfo: SignFieldParameters;
    let addFieldInfo: AddFieldParameters;
    let visualInfo: SignVisualParameters;
    let settings: SignerSettings;

    beforeEach(function () {
        info = {
            pageNumber: 1,

            name: 'Test Signer',
            location: 'Timisoara',
            reason: 'Signing',
            date: new Date(2023, 1, 20, 18, 47, 35), 
            contactInfo: 'signer@semnezonline.ro'
        };

        fieldInfo = {
            fieldName: 'Signature1',

            name: 'Test Signer',
            location: 'Timisoara',
            reason: 'Signing',
            date: new Date(2023, 1, 20, 18, 47, 35), 
            contactInfo: 'signer@semnezonline.ro',

            background: pdfSignerAssets13.signatureJpgImage,
            texts: [
                {
                    lines: [ 
                        'JOHN', 
                        'DOE'
                    ]
                }, {
                    lines: [ 
                        'Digitally signed by', 
                        'JOHN DOE', 
                        'Date: 2023.11.03', 
                        '20:28:46 +02\'00\''
                    ]
                }
            ]
         };

        addFieldInfo = {
            pageNumber: 1,
            boundingBox: { left: 50.0, top: 100, right: 50.0 + 214.0, bottom: 100 + 70 }
        }

        visualInfo = {
            pageNumber: 1,

            background: pdfSignerAssets17Streams.signaturePngImage,
            boundingBox: { left: 50.0, top: 100, right: 50.0 + 214.0, bottom: 100 + 70 }
        };

        settings = {
            signatureLength: 4000 - 6,
            rangePlaceHolder: 9999999,
            
            p12Certificate: settingsAssets.p12Certificate,
            pemCertificate: settingsAssets.pemCertificate,
            pemKey: settingsAssets.pemKey,
            certificatePassword: 'password'
        }
        pdfSigner = new PdfSigner(settings);
    });

    it('_generate', async function () {
        const pdf = await generatePdfLibPdfAsync(true);
        await generateAsset.generateBinaryAsync(pdfSignerAssets17Streams.paths.pdf, pdf);
        
        info.contactInfo = 'signer@semnezonline.ro';
        const signedPdf = await pdfSigner.signAsync(pdf, info);
        const tamperedSignedPdf = bufferReplace(signedPdf, 'signer@semnezonline.ro', 'xxxxxx@xxxxxxxxxxxx.xx');
        await generateAsset.generateBinaryAsync(pdfSignerAssets17Streams.paths.tamperedSignedPdf, tamperedSignedPdf);

        info.contactInfo = 'signer2@semnezonline.ro';
        const tamperedOnlyFirstTwiceSignedPdf = await pdfSigner.signAsync(tamperedSignedPdf, info);
        await generateAsset.generateBinaryAsync(pdfSignerAssets17Streams.paths.tamperedOnlyFirstTwiceSignedPdf, tamperedOnlyFirstTwiceSignedPdf);

        const tamperedAppendedSignedPdf = Buffer.concat([ signedPdf, signedPdf.subarray(pdf.length) ]);
        await generateAsset.generateBinaryAsync(pdfSignerAssets17Streams.paths.tamperedAppendedSignedPdf, tamperedAppendedSignedPdf);
    })

    describe('addPlaceholderAsync', function() {
        it('adds placeholder', async function() {
            const res = await pdfSigner.addPlaceholderAsync(pdfSignerAssets17Streams.pdf, info);

            await generateAsset.generateBinaryAsync(pdfSignerAssets17Streams.paths.placeholderPdf, res);
            expect(res).to.be.deep.equal(pdfSignerAssets17Streams.placeholderPdf);
        })

        it('adds placeholder for different settings', async function() {
            const pdfSigner = new PdfSigner({ ...settings, signatureLength: 5000, rangePlaceHolder: 9999 });
            const res = await pdfSigner.addPlaceholderAsync(pdfSignerAssets17Streams.pdf, info);

            await generateAsset.generateBinaryAsync(pdfSignerAssets17Streams.paths.differentPlaceholderPdf, res);
            expect(res).to.be.deep.equal(pdfSignerAssets17Streams.differentPlaceholderPdf);
        })

        it('adds placeholder for empty info', async function() {
            const info: SignDigitalParameters = {
                pageNumber: 1
            }
            
            const res = await pdfSigner.addPlaceholderAsync(pdfSignerAssets17Streams.pdf, info);

            await generateAsset.generateBinaryAsync(pdfSignerAssets17Streams.paths.noInfoPlaceholderPdf, res);
            expect(res).to.be.deep.equal(pdfSignerAssets17Streams.noInfoPlaceholderPdf);
        })
        

        it('throws when not enough space for range', async function() {
            const pdfSigner = new PdfSigner({ ...settings, rangePlaceHolder: 9 });
            
            await expect(pdfSigner.addPlaceholderAsync(pdfSignerAssets17Streams.pdf, info)).to.be.rejected;
        })

        it('adds placeholder for positive coordinates', async function() {
            info.visual = {
                background: pdfSignerAssets17Streams.signaturePngImage,
                boundingBox: { left: 50.0, top: 100, right: 50.0 + 214.0, bottom: 100 + 70 }
            };
            const res = await pdfSigner.addPlaceholderAsync(pdfSignerAssets17Streams.pdf, info);
            
            await generateAsset.generateBinaryAsync(pdfSignerAssets17Streams.paths.positiveCoordinatesPlaceholderPdf, res);
            expect(res).to.be.deep.equal(pdfSignerAssets17Streams.positiveCoordinatesPlaceholderPdf);
        })

        it('adds placeholder for negative coordinates', async function() {
            info.visual = {
                background: pdfSignerAssets17Streams.signaturePngImage,
                boundingBox: { left: -50.0 - 214.0, top: -100 - 70, right: -50.0, bottom: -100 }
            };
            const res = await pdfSigner.addPlaceholderAsync(pdfSignerAssets17Streams.pdf, info);
            
            await generateAsset.generateBinaryAsync(pdfSignerAssets17Streams.paths.negativeCoordinatesPlaceholderPdf, res);
            expect(res).to.be.deep.equal(pdfSignerAssets17Streams.negativeCoordinatesPlaceholderPdf);
        })

        it('adds placeholder with jpg image', async function() {
            info.visual = {
                background: pdfSignerAssets17Streams.signatureJpgImage,
                boundingBox: { left: 50.0, top: 100, right: 50.0 + 214.0, bottom: 100 + 70 }
            }
            const res = await pdfSigner.addPlaceholderAsync(pdfSignerAssets17Streams.pdf, info);

            await generateAsset.generateBinaryAsync(pdfSignerAssets17Streams.paths.jpgImagePlaceholderPdf, res);
            expect(res).to.be.deep.equal(pdfSignerAssets17Streams.jpgImagePlaceholderPdf);
        })

        it('adds placeholder with png image', async function() {
            info.visual = {
                background: pdfSignerAssets17Streams.signaturePngImage,
                boundingBox: { left: 50.0, top: 100, right: 50.0 + 214.0, bottom: 100 + 70 }
            }
            const res = await pdfSigner.addPlaceholderAsync(pdfSignerAssets17Streams.pdf, info);

            await generateAsset.generateBinaryAsync(pdfSignerAssets17Streams.paths.pngImagePlaceholderPdf, res);
            expect(res).to.be.deep.equal(pdfSignerAssets17Streams.pngImagePlaceholderPdf);
        })
    })

    describe('addFieldAsync', function() {
        it('adds field', async function() {
            const res = await pdfSigner.addFieldAsync(pdfSignerAssets17Streams.pdf, addFieldInfo);

            await generateAsset.generateBinaryAsync(pdfSignerAssets17Streams.paths.fieldPdf, res);
            expect(res).to.be.deep.equal(pdfSignerAssets17Streams.fieldPdf);
        })

        it('adds field for different settings', async function() {
            const pdfSigner = new PdfSigner({ ...settings, signatureLength: 5000, rangePlaceHolder: 9999 });
            const res = await pdfSigner.addFieldAsync(pdfSignerAssets17Streams.pdf, addFieldInfo);

            await generateAsset.generateBinaryAsync(pdfSignerAssets17Streams.paths.differentFieldPdf, res);
            expect(res).to.be.deep.equal(pdfSignerAssets17Streams.differentFieldPdf);
        })

        it('adds field for positive coordinates', async function() {
            addFieldInfo.boundingBox = { left: 50.0, top: 100, right: 50.0 + 214.0, bottom: 100 + 70 };
            
            const res = await pdfSigner.addFieldAsync(pdfSignerAssets17Streams.pdf, addFieldInfo);
            
            await generateAsset.generateBinaryAsync(pdfSignerAssets17Streams.paths.positiveCoordinatesFieldPdf, res);
            expect(res).to.be.deep.equal(pdfSignerAssets17Streams.positiveCoordinatesFieldPdf);
        })

        it('adds field for negative coordinates', async function() {
            addFieldInfo.boundingBox = { left: -50.0 - 214.0, top: -100 - 70, right: -50.0, bottom: -100 };

            const res = await pdfSigner.addFieldAsync(pdfSignerAssets17Streams.pdf, addFieldInfo);
            
            await generateAsset.generateBinaryAsync(pdfSignerAssets17Streams.paths.negativeCoordinatesFieldPdf, res);
            expect(res).to.be.deep.equal(pdfSignerAssets17Streams.negativeCoordinatesFieldPdf);
        })
    })
    
    describe('signAsync', function() {
        it('signs document', async function() {
            const res = await pdfSigner.signAsync(pdfSignerAssets17Streams.pdf, info);
            
            await generateAsset.generateBinaryAsync(pdfSignerAssets17Streams.paths.signedPdf, res);
            expect(res).to.be.deep.equal(pdfSignerAssets17Streams.signedPdf);
        })

        it('signs already signed document', async function() {
            const res = await pdfSigner.signAsync(pdfSignerAssets17Streams.signedPdf, info);

            await generateAsset.generateBinaryAsync(pdfSignerAssets17Streams.paths.twiceSignedPdf, res);
            expect(res).to.be.deep.equal(pdfSignerAssets17Streams.twiceSignedPdf);
        })

        it('throws when not enough space for signature', async function() {
            const pdfSigner = new PdfSigner({ ...settings, signatureLength: 200 });
            
            await expect(pdfSigner.signAsync(pdfSignerAssets17Streams.pdf, info)).to.be.rejected;
        })

        it('signs for positive coordinates', async function() {
            info.visual = {
                background: pdfSignerAssets17Streams.signaturePngImage,
                boundingBox: { left: 50.0, top: 100, right: 50.0 + 214.0, bottom: 100 + 70 }
            };
            const res = await pdfSigner.signAsync(pdfSignerAssets17Streams.pdf, info);
            
            await generateAsset.generateBinaryAsync(pdfSignerAssets17Streams.paths.positiveCoordinatesSignedPdf, res);
            expect(res).to.be.deep.equal(pdfSignerAssets17Streams.positiveCoordinatesSignedPdf);
        })

        it('signs for negative coordinates', async function() {
            info.visual = {
                background: pdfSignerAssets17Streams.signaturePngImage,
                boundingBox: { left: -50.0 - 214.0, top: -100 - 70, right: -50.0, bottom: -100 }
            };
            const res = await pdfSigner.signAsync(pdfSignerAssets17Streams.pdf, info);
            
            await generateAsset.generateBinaryAsync(pdfSignerAssets17Streams.paths.negativeCoordinatesSignedPdf, res);
            expect(res).to.be.deep.equal(pdfSignerAssets17Streams.negativeCoordinatesSignedPdf);
        })

        it('signs with jpg image', async function() {
            info.visual = {
                background: pdfSignerAssets17Streams.signatureJpgImage,
                boundingBox: { left: 50.0, top: 100, right: 50.0 + 214.0, bottom: 100 + 70 }
            };
            const signedPdf = await pdfSigner.signAsync(pdfSignerAssets17Streams.pdf, info);
            info.visual.boundingBox.left += 250;
            info.visual.boundingBox.right += 250;
            const twiceSignedPdf = await pdfSigner.signAsync(signedPdf, info);

            await generateAsset.generateBinaryAsync(pdfSignerAssets17Streams.paths.jpgImageTwiceSignedPdf, twiceSignedPdf);
            expect(twiceSignedPdf).to.be.deep.equal(pdfSignerAssets17Streams.jpgImageTwiceSignedPdf);
        })

        it('signs with png image', async function() {
            info.visual = {
                background: pdfSignerAssets17Streams.signaturePngImage,
                boundingBox: { left: 50.0, top: 100, right: 50.0 + 214.0, bottom: 100 + 70 }
            };
            const signedPdf = await pdfSigner.signAsync(pdfSignerAssets17Streams.pdf, info);
            info.visual.boundingBox.left += 250;
            info.visual.boundingBox.right += 250;
            const twiceSignedPdf = await pdfSigner.signAsync(signedPdf, info);

            await generateAsset.generateBinaryAsync(pdfSignerAssets17Streams.paths.pngImageTwiceSignedPdf, twiceSignedPdf);
            expect(twiceSignedPdf).to.be.deep.equal(pdfSignerAssets17Streams.pngImageTwiceSignedPdf);
        })

        it('works for missing p12 certificate', async function() {
            const pdfSigner = new PdfSigner({ ...settings, p12Certificate: undefined });

            await expect(pdfSigner.signAsync(pdfSignerAssets17Streams.pdf, info)).to.be.fulfilled;
        })

        it('works for missing pem certificate', async function() {
            const pdfSigner = new PdfSigner({ ...settings, pemCertificate: undefined });

            await expect(pdfSigner.signAsync(pdfSignerAssets17Streams.pdf, info)).to.be.fulfilled;
        })

        it('works for missing pem key', async function() {
            const pdfSigner = new PdfSigner({ ...settings, pemKey: undefined });

            await expect(pdfSigner.signAsync(pdfSignerAssets17Streams.pdf, info)).to.be.fulfilled;
        })

        it('throws for missing p12 certificate, pem certificate and pem key', async function() {
            const pdfSigner = new PdfSigner({ ...settings, p12Certificate: undefined, pemCertificate: undefined, pemKey: undefined });

            await expect(pdfSigner.signAsync(pdfSignerAssets17Streams.pdf, info)).to.be.rejected;
        })
    })

    describe.skip('signFieldAsync', function() {
        it('signs document', async function() {
            const res = await pdfSigner.signFieldAsync(pdfSignerAssets17Streams.fieldPdf, fieldInfo);
            
            await generateAsset.generateBinaryAsync(pdfSignerAssets17Streams.paths.fieldSignedPdf, res);
            expect(res).to.be.deep.equal(pdfSignerAssets17Streams.fieldSignedPdf);
        })

        it('signs specified field', async function() {
            addFieldInfo.boundingBox.left += 250;
            addFieldInfo.boundingBox.right += 250;
            const twoFieldsPdf = await pdfSigner.addFieldAsync(pdfSignerAssets17Streams.fieldPdf, addFieldInfo);

            fieldInfo.fieldName = 'Signature2';

            const res = await pdfSigner.signFieldAsync(twoFieldsPdf, fieldInfo);
            
            await generateAsset.generateBinaryAsync(pdfSignerAssets17Streams.paths.specifiedFieldSignedPdf, res);
            expect(res).to.be.deep.equal(pdfSignerAssets17Streams.specifiedFieldSignedPdf);
        })

        it('throws when field not found', async function() {
            fieldInfo.fieldName = 'Another name';

            await expect(pdfSigner.signFieldAsync(pdfSignerAssets17Streams.fieldPdf, fieldInfo)).to.be.rejected;
        })

        it('throws for signature', async function() {
            await expect(pdfSigner.signFieldAsync(pdfSignerAssets17Streams.signedPdf, fieldInfo)).to.be.rejected;
        })

        it('signs with jpg image', async function() {
            fieldInfo.background = pdfSignerAssets17Streams.signatureJpgImage;

            const signedPdf = await pdfSigner.signFieldAsync(pdfSignerAssets17Streams.fieldPdf, fieldInfo);

            await generateAsset.generateBinaryAsync(pdfSignerAssets17Streams.paths.jpgImageFieldSignedPdf, signedPdf);
            expect(signedPdf).to.be.deep.equal(pdfSignerAssets17Streams.jpgImageFieldSignedPdf);
        })

        it('signs with png image', async function() {
            fieldInfo.background = pdfSignerAssets17Streams.signaturePngImage;

            const signedPdf = await pdfSigner.signFieldAsync(pdfSignerAssets17Streams.fieldPdf, fieldInfo);

            await generateAsset.generateBinaryAsync(pdfSignerAssets17Streams.paths.pngImageFieldSignedPdf, signedPdf);
            expect(signedPdf).to.be.deep.equal(pdfSignerAssets17Streams.pngImageFieldSignedPdf);
        })

        it('works for missing p12 certificate', async function() {
            const pdfSigner = new PdfSigner({ ...settings, p12Certificate: undefined });

            await expect(pdfSigner.signFieldAsync(pdfSignerAssets17Streams.fieldPdf, fieldInfo)).to.be.fulfilled;
        })

        it('works for missing pem certificate', async function() {
            const pdfSigner = new PdfSigner({ ...settings, pemCertificate: undefined });

            await expect(pdfSigner.signFieldAsync(pdfSignerAssets17Streams.fieldPdf, fieldInfo)).to.be.fulfilled;
        })

        it('works for missing pem key', async function() {
            const pdfSigner = new PdfSigner({ ...settings, pemKey: undefined });

            await expect(pdfSigner.signFieldAsync(pdfSignerAssets17Streams.fieldPdf, fieldInfo)).to.be.fulfilled;
        })

        it('throws for missing p12 certificate, pem certificate and pem key', async function() {
            const pdfSigner = new PdfSigner({ ...settings, p12Certificate: undefined, pemCertificate: undefined, pemKey: undefined });

            await expect(pdfSigner.signFieldAsync(pdfSignerAssets17Streams.fieldPdf, fieldInfo)).to.be.rejected;
        })
    })
    
    describe('signVisualAsync', function() {
        it('signs document', async function() {
            const res = await pdfSigner.signVisualAsync(pdfSignerAssets17Streams.pdf, visualInfo);
            
            await generateAsset.generateBinaryAsync(pdfSignerAssets17Streams.paths.signedVisualPdf, res);
            expect(res).to.be.deep.equal(pdfSignerAssets17Streams.signedVisualPdf);
        })

        it('throws for digitally signed document', async function() {
            await expect(pdfSigner.signVisualAsync(pdfSignerAssets17Streams.signedPdf, visualInfo)).to.be.rejected;
        })

        it('signs for positive coordinates', async function() {
            visualInfo.boundingBox = { left: 50.0, top: 100, right: 50.0 + 214.0, bottom: 100 + 70 };

            const res = await pdfSigner.signVisualAsync(pdfSignerAssets17Streams.pdf, visualInfo);
            
            await generateAsset.generateBinaryAsync(pdfSignerAssets17Streams.paths.positiveCoordinatesSignedVisualPdf, res);
            expect(res).to.be.deep.equal(pdfSignerAssets17Streams.positiveCoordinatesSignedVisualPdf);
        })

        it('signs for negative coordinates', async function() {
            visualInfo.boundingBox = { left: -50.0 - 214.0, top: -100 - 70, right: -50.0, bottom: -100 };

            const res = await pdfSigner.signVisualAsync(pdfSignerAssets17Streams.pdf, visualInfo);
            
            await generateAsset.generateBinaryAsync(pdfSignerAssets17Streams.paths.negativeCoordinatesSignedVisualPdf, res);
            expect(res).to.be.deep.equal(pdfSignerAssets17Streams.negativeCoordinatesSignedVisualPdf);
        })

        it('signs with jpg image', async function() {
            visualInfo.background = pdfSignerAssets17Streams.signatureJpgImage;

            const signedPdf = await pdfSigner.signVisualAsync(pdfSignerAssets17Streams.pdf, visualInfo);
            visualInfo.boundingBox.left += 250;
            visualInfo.boundingBox.right += 250;
            const twiceSignedPdf = await pdfSigner.signVisualAsync(signedPdf, visualInfo);

            await generateAsset.generateBinaryAsync(pdfSignerAssets17Streams.paths.jpgImageTwiceSignedVisualPdf, twiceSignedPdf);
            expect(twiceSignedPdf).to.be.deep.equal(pdfSignerAssets17Streams.jpgImageTwiceSignedVisualPdf);
        })

        it('signs with png image', async function() {
            visualInfo.background = pdfSignerAssets17Streams.signaturePngImage;

            const signedPdf = await pdfSigner.signVisualAsync(pdfSignerAssets17Streams.pdf, visualInfo);
            visualInfo.boundingBox.left += 250;
            visualInfo.boundingBox.right += 250;
            const twiceSignedPdf = await pdfSigner.signVisualAsync(signedPdf, visualInfo);

            await generateAsset.generateBinaryAsync(pdfSignerAssets17Streams.paths.pngImageTwiceSignedVisualPdf, twiceSignedPdf);
            expect(twiceSignedPdf).to.be.deep.equal(pdfSignerAssets17Streams.pngImageTwiceSignedVisualPdf);
        })
    })
    
    describe('verifySignaturesAsync', function() {
        it('returns undefined for no signatures', async function() {
            const res = await pdfSigner.verifySignaturesAsync(pdfSignerAssets17Streams.pdf);
            expect(res).to.be.undefined;
        })

        it('returns undefined for signature field', async function() {
            const res = await pdfSigner.verifySignaturesAsync(pdfSignerAssets17Streams.fieldPdf);
            expect(res).to.be.undefined;
        })

        it('validates one signature', async function() {
            const res = await pdfSigner.verifySignaturesAsync(pdfSignerAssets17Streams.signedPdf);

            await generateAsset.generateJsonAsync(pdfSignerAssets17Streams.paths.checkSignedPdf, res);
            expect(res).to.be.deep.equal(pdfSignerAssets17Streams.checkSignedPdf);
        })

        it('validates two signatures', async function() {
            const res = await pdfSigner.verifySignaturesAsync(pdfSignerAssets17Streams.twiceSignedPdf);

            await generateAsset.generateJsonAsync(pdfSignerAssets17Streams.paths.checkTwiceSignedPdf, res);
            expect(res).to.be.deep.equal(pdfSignerAssets17Streams.checkTwiceSignedPdf);
        })

        it('detects tampered signature', async function() {
            const res = await pdfSigner.verifySignaturesAsync(pdfSignerAssets17Streams.tamperedSignedPdf);

            await generateAsset.generateJsonAsync(pdfSignerAssets17Streams.paths.checkTamperedSignedPdf, res);
            expect(res).to.be.deep.equal(pdfSignerAssets17Streams.checkTamperedSignedPdf);
        })

        it('detects only first tampered signature', async function() {
            const res = await pdfSigner.verifySignaturesAsync(pdfSignerAssets17Streams.tamperedOnlyFirstTwiceSignedPdf);

            await generateAsset.generateJsonAsync(pdfSignerAssets17Streams.paths.checkTamperedOnlyFirstTwiceSignedPdf, res);
            expect(res).to.be.deep.equal(pdfSignerAssets17Streams.checkTamperedOnlyFirstTwiceSignedPdf);
        })

        it('detects tampered appended pdf', async function() {
            const res = await pdfSigner.verifySignaturesAsync(pdfSignerAssets17Streams.tamperedAppendedSignedPdf);

            await generateAsset.generateJsonAsync(pdfSignerAssets17Streams.paths.checkTamperedAppendedSignedPdf, res);
            expect(res).to.be.deep.equal(pdfSignerAssets17Streams.checkTamperedAppendedSignedPdf);
        })
    })

    describe('getFieldsAsync', function() {
        it('returns no fields', async function() {
            const res = await pdfSigner.getFieldsAsync(pdfSignerAssets17Streams.pdf);
            expect(res).to.be.deep.equal([]);
        })

        it('returns one field', async function() {
            const res = await pdfSigner.getFieldsAsync(pdfSignerAssets17Streams.fieldPdf);
            expect(res).to.be.deep.equal([ 'Signature1' ]);
        })

        it('returns two fields', async function() {
            const twoFieldsPdf = await pdfSigner.addFieldAsync(pdfSignerAssets17Streams.fieldPdf, addFieldInfo);
            const res = await pdfSigner.getFieldsAsync(twoFieldsPdf);
            expect(res).to.be.deep.equal([ 'Signature1', 'Signature2' ]);
        })


        it('returns no fields for signed pdf', async function() {
            const res = await pdfSigner.getFieldsAsync(pdfSignerAssets17Streams.signedPdf);
            expect(res).to.be.deep.equal([]);
        })
    })
})
